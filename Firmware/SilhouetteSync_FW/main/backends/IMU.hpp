#pragma once

// esp-idf includes
#include "driver/gpio.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"

// in-house includes
#include "../Device.hpp"
#include "../defs/pin_defs.hpp"
#include "BNO08x.hpp"

/**
 *
 * @brief IMU backend class.
 *
 * Class that manages onboard BNO085 IMU and its communication with the Device frontend,
 * can be set between different states (ex. sample, sleep, calibrate, etc..)
 */
class IMU
{
    public:
        /**
         * @brief Constructs an IMU backend object.
         *
         * Creates object to manage SilhouetteSync's onboard IMU and communicate with Device frontend.
         *
         * @param d reference to Device frontend
         * @return void, nothing to return
         */
        IMU(Device& d);

    private:
        Device& d;                 ///<reference to device fontend to update with new samples, or receive state changes
        BNO08x imu;                ///<imu driver object
        TaskHandle_t imu_task_hdl; ///<imu task handle
        EventGroupHandle_t
                imu_state_event_group_hdl; ///<imu state event group handle, indicates to imu_task the currently requested IMUState in device frontend
        EventBits_t imu_state_bits;        ///<imu state event bits

        static const constexpr uint8_t CALIBRATION_STATE_BIT = BIT0; ///< Calibration state event bit
        static const constexpr uint8_t SAMPLING_STATE_BIT = BIT1;    ///< Sampling state event bit
        static const constexpr uint8_t TARE_STATE_BIT = BIT2;        ///< Tare state event bit
        static const constexpr uint8_t ALL_IMU_STATE_BITS =
                CALIBRATION_STATE_BIT | SAMPLING_STATE_BIT | TARE_STATE_BIT; ///< All IMU state event bits mask.

        static const constexpr uint32_t ROTATION_VECTOR_REPORT_PERIOD_US =
                5000;                                                 ///<Rate at which quaternion reports are generated by the IMU (in microseconds)
        static const constexpr uint32_t GYRO_REPORT_PERIOD_US = 1000; ///<Rate at which gyro reports are generated by the IMU (in microseconds)
        static const constexpr char* TAG = "IMU";                     ///<class tag, used in debug logs

        /**
         * @brief Launches imu sampling task.
         *
         * This function is used to get around the fact xTaskCreate() from the freertos api requires a static task function.
         *
         * To prevent having to write the imu sampling task from the context of a static function, this launches the imu_task()
         * from the IMU object passed into xTaskCreate().
         *
         * @param arg a void pointer to the IMU object from xTaskCreate() call
         * @return void, nothing to return
         */
        static void imu_task_trampoline(void* arg);

        /**
         * @brief IMU sampling task.
         *
         * Task responsible for handling sampling, passing of new data to the device model, calibration, taring, and other operations.
         * The imu_event_group_hdl controls the flow of its execution.
         * @return void, nothing to return
         */
        void imu_task();

        /**
         * @brief Takes samples until sample state is exited.
         *
         * Takes samples until imu_state_event_group_hdl indicates the sampling state is longer being requested in device frontend.
         * @return void, nothing to return
         */
        void take_samples();

        /**
         * @brief Tares IMU to origin quaternion.
         *
         */
        void tare_imu();

        /**
         * @brief Calls calibration routine and communicates to device frontend whether it was successful or not.
         *
         */
        void calibrate_imu();

        /**
         * @brief Runs IMU calibration routine.
         *
         */
        bool calibration_routine();
};